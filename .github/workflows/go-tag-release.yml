name: Go

on:
  push:
    tags: [ 'v*' ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Build Artifacts for OSX, Linux, Windows
      run: |
        set +e
        TAG_VERSION=$(git describe --tags)
        set -e

        LD_FLAGS_VERSION="-X \"main.Version=${TAG_VERSION:-'v1.0.0-dev'}\""

        go version
        mkdir output
        GOOS=darwin GOARCH=amd64 go build -ldflags "${LD_FLAGS_VERSION}" -o output/tanzu-apptx-cli-darwin_x64
        GOOS=linux GOARCH=amd64 go build -ldflags "${LD_FLAGS_VERSION}" -o output/tanzu-apptx-cli-linux_x64
        GOOS=windows GOARCH=amd64 go build -ldflags "${LD_FLAGS_VERSION}" -o output/tanzu-apptx-cli-windows_x64.exe

        tar -czvf tanzu-apptx-clis.tar.gz output


        
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: artifacts
        path: output
        retention-days: 5

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./tanzu-apptx-clis.tar.gz
        asset_name: tanzu-apptx-clis.tar.gz
        asset_content_type: application/zip